@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@*category breadcrumb*@
@if (Model.DisplayCategoryBreadcrumb)
{
    <div class="breadcrumb-wrapper">
        <ul class="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
            <li>
                <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")"><i class="fa fa-home"></i></a>
                @*<span class="delimiter">@breadcrumbDelimiter</span> </li>*@
                @{ int position = 1; }
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                        @if (isLastCategory)
                        {
                            <strong class="current-item active" itemprop="name">@cat.Name</strong>
                            <span itemprop="item" itemscope itemtype="http://schema.org/Thing"
                                  id="@Url.RouteUrl("Category", new {SeName = cat.SeName})">
                            </span>
                        }
                        else
                        {
                            <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="item"><span itemprop="name">@cat.Name</span></a>
                            @*<span class="delimiter">@breadcrumbDelimiter</span>*@
                        }
                        <meta itemprop="position" content="@position" />
                    </li>
                    position++;
                }
        </ul>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
}
@section CatalogFilters {
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
    @*@await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)*@
}

<div class="shadow-2">
    <div>
        <div class="c-filter--fixtop">
            <div class="py--12 container--md">
                <i class="d-none"></i> <div class="search-filter is-flex jbetween">
                    <div class="is-flex search-filter__fields">
                        <div data-v-1b774c77="">
                            <button data-v-1b774c77="" class="btn btn-outline--gray btn-xs hidden-md-and-down search-filter__button text-dark">
                                Hủy phòng linh hoạt
                                <!---->
                            </button>
                        </div> 
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="page category-page">
    <div class="row">
        <h2 class="extra-bold col-xs-12 col-md-9">@Model.Name</h2>
        <div class="col-xs-12 col-md-3 is-flex jend">
            <div class="el-select is-square">
                <div class="el-input el-input--prefix el-input--suffix">
                    <input type="text" readonly="readonly" autocomplete="off" placeholder="Lựa chọn" class="el-input__inner">
                    <span class="el-input__prefix">
                        <span>Sắp xếp:</span>
                    </span>
                    <span class="el-input__suffix">
                        <span class="el-input__suffix-inner">
                            <i class="el-select__caret el-input__icon el-icon-arrow-up"></i>
                        </span>
                    </span>
                </div>
            </div>
        </div>

    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
            <div class="sub-category-grid row">
                @if (Model.SubCategories.Count <= 3)
                {
                    foreach (var item in Model.SubCategories)
                    {
                        <div class="item-box col-xs-12 col-sm-4 col-md-4">
                            <div class="sub-category-item product-category-item">
                                <div class="picture">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title" class="product-img">
                                        <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    </a>
                                    <div class="title">
                                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title"> @item.Name</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div id="sub-category-slider" class="sub-category-slider owl-carousel owl-theme">
                        @foreach (var item in Model.SubCategories)
                        {
                            <div class="item-box col-xs-12 col-sm-12 col-md-12">
                                <div class="sub-category-item product-category-item">
                                    <div class="picture">
                                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title" class="product-img">
                                            <img class="owl-lazy" data-src="@item.PictureModel.ImageUrl" alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                        </a>
                                        <div class="title">
                                            <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title"> @item.Name</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        <div class="pager clearfix">
            @{
                var catalogProductsViewData = new ViewDataDictionary(ViewData);
                catalogProductsViewData["fetchUrl"] = Html.Raw(Url.Action("GetCategoryProducts", "Catalog", new { categoryId = Model.Id }));
            }
            @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData)
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
        </div>
    </div>
</div>

<div class="el-select-dropdown el-popper" style="min-width: 280px; transform-origin: center top; z-index: 2007; display: none;">
                                                 min-width: 280px; transform-origin: center top; z-index: 2025; position: absolute; top: 334px; left: 1030px;
    <div class="el-scrollbar" style="">
        <div class="el-select-dropdown__wrap el-scrollbar__wrap" style="margin-bottom: -17px; margin-right: -17px;">
            <ul class="el-scrollbar__view el-select-dropdown__list">
                <li class="el-select-dropdown__item hover">
                    <span>Giá tăng dần</span>
                </li>
                <li class="el-select-dropdown__item">
                    <span>Giá giảm dần</span>
                </li>
            </ul>
        </div>
        <div class="el-scrollbar__bar is-horizontal">
            <div class="el-scrollbar__thumb" style="transform: translateX(0%);"></div>
        </div>
        <div class="el-scrollbar__bar is-vertical">
            <div class="el-scrollbar__thumb" style="transform: translateY(0%);"></div>
        </div>
    </div>
    <div x-arrow="" class="popper__arrow" style="left: 35px;"></div>
</div>

